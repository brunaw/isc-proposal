# The proposal
<!--
How are you going to solve the problem? Include the concrete actions you
will take and an estimated timeline. What are likely failure modes and
how will you recover from them?

This is where the proposal should be outlined.
-->



## Overview
<!--
At a high-level address what your proposal is and how it will address
the problem identified. Highlight any benefits to the R Community that
follow from solving the problem. This should be your most compelling
section.

Include concrete actions you will take and estimated timeline.
-->


The book named *Causal Inference for The Brave and True* is a highly regarded open-source book whose code is currently available only in `python`. While popular in industry, this excludes a large community of learners, researchers, and instructors, who primarily use `R`, which can
be called the most important coding language for statistics,
and also very relevant to causal inference. 
With over 3,000 GitHub stars, the book’s reach is significant, 
yet its lack of an `R` version limits accessibility, reproducibility, and educational impact. This project aims to
adress that gap by providing a faithful `R` translation of the book’s code, making causal inference concepts more accessible, reproducible, and impactful for the community.


To solve this problem, we will systematically translate the existing `python` code from *Causal Inference for The Brave and True*  into `R` code, ensuring that all examples produce equivalent outputs and remain easy to follow. The process will include:

- Code Translation and Validation – Convert each Python example into `R`, following the same logic and producing the same results; 

- Testing and Reproducibility – Use reproducible scripts and test cases (whenever needed) to confirm correctness and consistency across examples; 

- Community Feedback – Share early drafts in open-source platforms (mainly GitHub) to gather input and improvement suggestions from the book author and the community. 

### Timeline

The book is divided in two parts, which sum up to 
25 sections. As it is a progressive book, some chapters are
more complicated than others. Because of that, we estimate
each chapter's translation can take from 1 to 3 days to 
be completed, including all code testing and review. With this in mind, we plan assuming the following timeline: 


- Phase 1: Planning and Setup (1 week) 

  –  Review the book structure, `python` code, and `R` features to be used; 
  - Set up the project repository, testing framework, and reproducibility tools.

- Phase 2: Translation and Validation (8 weeks)

  - Translate 3–4 chapters per week, allowing 1–3 days per chapter depending on complexity; 
  - Validate `R` outputs against `python` results for correctness;
  - Add inline documentation and annotations, when needed. 

- Phase 3: Testing and Reproducibility (2 weeks)

  - Perform end-to-end checks on all chapters; 
  - Ensure reproducibility of code, figures, and examples; 
  - Correct any inconsistencies or errors identified during testing.

- Phase 4: Documentation and Community Feedback (1–2 weeks)

  - Finalize README, instructions, and propagation materials;
  - Share the nw repository on GitHub for feedback from the community. 

- Phase 5: Final Release (1 week)
  - Incorporate feedback and make final adjustments; 
  - Publish the complete `R` translation, fully documented and reproducible.
  - This step will also be continuous, given that further feedback can be given after the predicted "1 week"

Estimated Total Duration: 12 weeks (3 months)

  - Assuming the grant starts around November 2025, this project
should be finalized by February of 2026. 

### Possible Failures and Recovery Strategies

**Technical challenges**: 

  - `python` functionalities without direct R equivalents
  - Address by identifying best-practice `R` alternatives or building simple helper functions
  - Very unlikely to happen 

**Inconsistencies in results between `python` and R implementations**:

  - Use simulations and diagnostic checks to validate equivalence;
  - Document differences transparently.

**Delays in timeline due to complexity or workload**: 

  - Prioritize high-demand chapters first; 
  - Release work incrementally, and update iteratively.
  
## Detail
<!--
Go into more detail about the specifics of the project and how it delivers
against the problem.

Depending on project type the detail section should include:
-->

### Minimum Viable Product

<!--
What is the smallest thing you can build that delivers value to your users?
-->

The set of code files which translate the book's examples from
`python` to `R`. 

### Architecture

<!--
What does the high-level architecture look like?
-->

The final deliverable of this project is a set of 
notebook files which compile into the book using `R`
code as examples. No other refined architecture is necessary. 

### Assumptions

<!--
What assumptions are you making that, if proven false, would invalidate the project?
-->

We assume that the code can be fully translated into `R`, but
we have already checked that that is possible. 

### External dependencies

<!--
What external dependencies does the project have (e.g. libraries, services, other projects, etc.)?
-->

No big external dependencies, the book is provided as an 
independent `HTML` file in an *URL*, which should be
accessible by anyone with an internet connection and a web browser. The `R` code will use only the necessary libraries and
installation will be guided, whenever needed. 

